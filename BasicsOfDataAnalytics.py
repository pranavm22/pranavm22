# -*- coding: utf-8 -*-
"""DataAnalytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iLPl1JXwNWuffdlj-UNBmLRLLwzWK6OL
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

def ArrayFunc():
  #array
    arr1d = np.array([1,2,3])
    print("Array: ",arr1d)
    print("Dimensions of Array: ",arr1d.shape)

#accessing elements
    secondElement = arr1d[1]
    print("Second element is : ",secondElement)

#replacing an element
    arr1d[2] = 10
    print("Array: ",arr1d)
    print("Third element : ",arr1d[2])

#array
    arr2d = np.array([[1,2,3],[4,5,6],[7,8,9]])
    print(arr2d)

#dimensions
    print("Dimensions of 2d array: ",arr2d.shape)
    print(arr2d)

#accessing elements
    print("2nd row 1st column: ",arr2d[1,0])
    print("Last row ,last column: ",arr2d[-1,-1])
    print("3rd Row,first column: ",arr2d[2][0])

#array
    arrString = np.array(["India","Pakistan","Bangladesh","Afghanistan","Hong Kong","Sri Lanka"])
    print(arrString)

#dimension
    print("Dimensions of String Array: ",arrString.shape)
    print("4th element: ",arrString[3])

#arange
    arrAuto = np.arange(start = 1.0,stop=99.0,step = 1.5)
    print("Array: ")
    print(arrAuto)

#linspace
    arrAuto2 = np.linspace(1,2,5)
    print("Array: ")
    print(arrAuto2)

#random array
    arrRandom = np.random.rand(10)
    print("Random Array: ",arrRandom)

#ranodm array with dimensions
    arrRandom2 = np.random.rand(3,3)
    print(arrRandom2*100)

#constant array of dimensions given
    arrConst = np.full((3,3),10)
    print("Constant Array: ",arrConst)

#repeat array
    arr1 = [1,2,3]
    print(np.repeat(arr1,3))

#tile array
    print(np.tile(arr1,3))

#identity matrix
    idenMat = np.eye(4)
    print(idenMat)

    idenMat2 = np.identity(4)
    print(idenMat2)

#random 4X4 matrix
    arrRandom3 = np.random.rand(4,4)
    print(arrRandom3)
    arr2 = arrRandom3*10
    print(arr2)

#sum an array
    print("Arr2 along column")
    print(np.sum(arr2,axis=0))
    print("Array along row")
    print(np.sum(arr2,axis=1))

#statistics of array
    print("Mean of array")
    print(np.mean(arr2))
    print("Median of array")
    print(np.median(arr2))
    print("Variance of array")
    print(np.var(arr2))
    print("Standard Deviation of array")
    print(np.std(arr2))

#sorting array
#along row

    print("Array")
    print(arr2)
    print("Sorting along row")
    print(np.sort(arr2,axis=1))

    print("Array")
    print(arr2)
    print("Sorting along column")
    print(np.sort(arr2,axis=0))

#appending to array
    print(arr1d)
    print(np.append(arr1d,5))
    print(np.append(arr1d,[6,7,8]))

#deleting an element from array
    print(arr1d)
    print(np.delete(arr1d,[2,1]))

#concatenate arrays
    arrCon1 = np.array([[1,2,3,4],[7,6,5,8]])
    arrCon2 = np.array([[6,5,4,3],[2,3,4,1]])
    print("Array 1: ")
    print(arrCon1)
    print("Array 2: ")
    print(arrCon2)
    print("Column Combined: ")
    arrComCol = np.concatenate((arrCon1,arrCon2),axis=0)
    print(arrComCol)
    print("Row Combined: ")
    arrComRow = np.concatenate((arrCon1,arrCon2),axis=1)
    print(arrComRow)

ArrayFunc()

from google.colab import files
data = files.upload()
def DataAnalytics():
#head
    data = pd.read_csv("MJBB.csv")
    header = data.head()
    print("HEAD")
    print(header)
#tail    
    tailer = data.tail()
    print("TAIL")
    print(tailer)
#describe    
    describer = data.describe(include="all")
    print(describer)
#histogram    
    histo = data.hist(figsize=(20,30))
    plt.show()
#box plot
    sns.boxplot(x="G",y="PTS",data=data)
#drop any column or row
    data = data.drop(['EndYear'],axis=1)
    newHeader = data.head(5)
    print("Header")
    print(newHeader)
#rename any column or row
    data = data.rename(columns = {"PTS":"Points"})
    newHeader1 = data.head(5)
    print("Header")
    print(newHeader1)
#get any duplicated row
    dataDuplication = data[data.duplicated()]
    print("Number of rows")
    print(data.count)
    print("Dimensions of duplicate rows")
    print(dataDuplication.shape)
    print("Number of duplication rows")
    print(dataDuplication.count)
#removal of duplications
    dataDuplicationRemoval = data.drop_duplicates()
    print("Removal of Duplicates")
    print(dataDuplicationRemoval)
    print("Number of rows after removal of duplicates")
    print(dataDuplicationRemoval.shape)
#calculating null values
    print("Number of Null values")
    print(data.isnull().sum())
#removing null values
    print("After dropping the null values")
    dropData = data.dropna()
    print(dropData)
    print(dropData.count)
#histogram plot column wise
    data.Points.value_counts().nlargest(40).plot(kind='bar',figsize = (20,30))
    plt.title("Histogram")
    plt.xlabel("Year")
    plt.ylabel("Points")
#correlation plot
    plt.figure(figsize=(20,30))
    d = data.corr()
    sns.heatmap(d,cmap="BrBG",annot=True)
    d

DataAnalytics()